# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Run tests/coverage
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        channels: conda-forge
        activate-environment: desolver
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run:  conda install --file requirements.txt -y
    - name: Install pyaudi
      continue-on-error: ${{ matrix.python-version == 3.8 || matrix.python-version == 3.9 }}
      run: conda install pyaudi>=1.6.5 -y
    - name: Install pytorch on Linux and Windows
      if: startsWith(matrix.os, 'windows') || startsWith(matrix.os, 'ubuntu')
      run: conda install pytorch>=1.8.0 torchvision torchaudio cpuonly -c pytorch -y
    - name: Install pytorch on Mac
      if: startsWith(matrix.os, 'macos')
      run: conda install pytorch>=1.8.0 torchvision torchaudio -c pytorch -y
    - name: Test Numpy backend
      env: 
        DES_BACKEND: 'numpy'
      run: pytest --cov-append --cov-report=xml --cov=desolver -n 2 --run_implicit --run_explicit
    - name: Test PyTorch backend
      env:
        DES_BACKEND: 'torch'
        OMP_NUM_THREADS: 1
      run: pytest --cov-append --cov-report=xml --cov=desolver -n 2 --run_implicit --run_explicit --run_torch_gradients
    - name: Install codecov
      run: pip install codecov
    - name: Upload Coverage report
      run: codecov
  publish:
    name: Build and publish Python 🐍 distributions 📦 to PyPI and TestPyPI
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
      - name: Publish distribution 📦 to Test PyPI
        if: startsWith(github.ref, 'refs/tags/test_v')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish distribution 📦 to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}